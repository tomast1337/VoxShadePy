?start: statement+

?statement: assignment ";"
          | if_statement
          | func_decl
          | return_statement ";"
          | expr ";"
          | block

block: "{" statement* "}"

assignment: NAME "=" expr

?expr: or_expr

?or_expr: and_expr
        | or_expr "or" and_expr -> or_

?and_expr: not_expr
         | and_expr "and" not_expr -> and_

?not_expr: "not" not_expr -> not_
         | comparison

?comparison: math_expr
           | comparison ">" math_expr  -> gt
           | comparison "<" math_expr  -> lt
           | comparison ">=" math_expr -> ge
           | comparison "<=" math_expr -> le
           | comparison "==" math_expr -> eq
           | comparison "!=" math_expr -> ne

?math_expr: math_expr "+" math_expr -> add
          | math_expr "-" math_expr -> sub
          | math_expr "*" math_expr -> mul
          | math_expr "/" math_expr -> div
          | atom

?atom: func_call
     | NUMBER            -> number
     | NAME              -> var
     | "(" expr ")"

func_call: NAME "(" [expr ("," expr)*] ")"

if_statement: "if" "(" expr ")" statement ("else" statement)?

func_decl: "func" NAME "(" [param_list] ")" block

param_list: NAME ("," NAME)*

return_statement: "return" expr

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS
%ignore WS
