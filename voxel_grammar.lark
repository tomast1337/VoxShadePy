?start: statement+

?statement: if_stmt
          | return_stmt
          | assign_stmt
          | expr_stmt

if_stmt: "if" expr block
block: "{" statement* "}"

return_stmt: "return" expr ";"
assign_stmt: NAME "=" expr ";"
expr_stmt: expr ";"

?expr: comp_expr

?comp_expr: arith_expr (comp_op arith_expr)*

?arith_expr: term_expr (add_op term_expr)*

?term_expr: factor (mul_op factor)*

?factor: func_call
        | const_var
        | material
        | var
        | NUMBER
        | "(" expr ")"

func_call: ("sin"|"cos"|"noise") "(" [expr ("," expr)*] ")"

const_var: "x" -> x_var
         | "y" -> y_var
         | "z" -> z_var
         | "time" -> time_var

var: NAME -> var

material: MATERIAL -> material
MATERIAL: "air"|"stone"|"water"|"grass"|"crystal"
         |"sand"|"wood"|"metal"|"lava"|"ice"
         |"dirt"|"snow"|"cloud"|"glass"|"brick"|"obsidian"

comp_op: "==" -> eq_op
       | "!=" -> neq_op
       | "<" -> lt_op
       | ">" -> gt_op
       | "<=" -> lte_op
       | ">=" -> gte_op

add_op: "+"|"-"
mul_op: "*"|"/"

NAME: /(?!(air|stone|water|grass|crystal|sand|wood|metal|lava|ice|dirt|snow|cloud|glass|brick|obsidian)\b)[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /-?\d+(\.\d+)?/

%ignore /\s+/
%ignore /\/\/[^\n]*/